!Common graphs and builders
In the introduction we talked about the Roassal builders to cover the most common modelisation in Data Mining. In this Chapter we will present and explain the functionning of these builders and create in examples histograms, bar plots, scatter plots, radar and pie charts etc...
We will also discover and manage our datas.

In Roassal, simplicity comes with modularisation. In that case It is always easy to create a composition of graphs. Most of graphs like an histogram will need axises in adition to the visualization of datas itself. That is why in Roassal we will create this graph using a composition of two builders. Indeed the structure of a common graph will be composed of a RTGrapher, to manage the axises and then the dataSet is added to it. The RTGrapher is finally built.

The graph structure using RTGrapher:
[[[
graph := RTGrapher new.
dataSet := <aRTAbstractDataSet>.
graph add: dataSet.
graph build.
]]]
 
!!Histogram
Coming back to our iris.csv content saw in the previous chapter we will now manage this datas to create an histogram on the frequency of the epal length.

First we will process a bit our data to obtain usable datas for our histogram. As we just imported our datas from csv we will change the for first fields from String to Integer, and puts our datas in a variable:

[[[
iris := (NeoCSVReader on: ('iris.csv' asFileReference contents readStream) ) 
   	  addIntegerField; addIntegerField; addIntegerField; addIntegerField; addField; upToEnd.
]]]

We now need to take the first row of theses datas and ask RSimpleStat to make the histogram:
[[[
(iris collect: [ :i | i first ]) simpleHistogram
]]]	  

and obtain our first histogram Figure1.

+Histogram 1>file://figures/histo1.png|width=50+

@@note As reminder, this simple histogram is made using the class RSHistogram (RSimpleStat package). This class use the SOptimizedDistribution class (SimpleStat package) depending on the DhbHistogram class from SciSmalltalk. RSimpleStat reunite Roassal2 and SciSmalltalk to visualize statistics.

Having a look to the method #simpleHistogram:, we can easily find our base builders structure and customize our own visualization easily:
[[[
b := RTGrapher new.

ds := RTHistogramSet new.
ds distribution: SOptimizedHistogram new.
ds points: (iris collect: [ :i | i first ]).
ds barShape color: Color orange.
		
b add: ds. 
b axisX title: 'Sepal.Length'.
b axisY title: 'Frequency'.
b build
]]]

We create an instance of RTGrapher and an instance of RTHistogramSet. We define the points of our data set, we define which column to take in account, we also define that we want the SOptimizedHistogram distribution, using SciSmalltalk. We can change the color, add the data set to the grapher, change the axis title and build.

+Histogram 2>file://figures/histo2.png|width=50+

!!Density plot

In a same way than histogram, you can generate a density plot based on a normal distribution using the SDensity class of SimpleStat or from a SequenceableCollection with #density, a method from the RSimpleStat package.

[[[
(iris collect: [ :i | i first ]) density
]]]
+Density plot>file://figures/plot1.png|width=50+

!!Pie chart

The frequency of each iris names can be obtain in an annoted array this way:

[[[
ds := RTDistribution new on: (iris collect: [ :i | i last ]); annotatedFrequencyOfDifferentObjects
]]] 

The algorithm is quite easy, we can do another one on our own:
[[[
ds := iris collect: [ :i | i last ].	

ds := (ds asSet collect: [ :name |
	{(ds count: [ :i | i = name]). name}
	 ]) asArray.
]]]

Then we can get a pie chart with:
[[[
b := RTPieBuilder new.
b interaction popup.
b objects: ds.
b slice: #first.
b normalizer distinctColor.	
b labelled: #second.
b build.
]]]
+Pie chart>file://figures/pie1.png|width=50+

@@todo RTPieBuilder does not work with a Set for objects, problems with labels size

!!Bar plot

To do a bar plot we use now the RTGrapher and add it a RTStackedDataSet:
[[[
b := RTGrapher new.	
dt := RTStackedDataSet new.
dt points: ds.
dt y: #first.
dt barShape color: Color darkGray; width: 50.
dt barChartWithBarTitle: #second.
b add: dt.
b axisX noTick; noLabel.
b build.
]]]
+Bar plot>file://figures/bar1.png|width=50+

Note that in this case the histogram can also be used:
[[[
(iris collect: [ :i | i last ]) histogram
]]]
+Histogram 3>file://figures/histo3.png|width=50+
