!Common graphs and builders
In the introduction we talked about the Roassal builders to cover the most common modelisation in Data Mining. In this Chapter we will present and explain the functionning of these builders and create in examples histograms, bar plots, scatter plots, radar and pie charts etc...
We will also discover and manage our datas.

In Roassal, simplicity comes with modularisation. In that case It is always easy to create a composition of graphs. Most of graphs like an histogram will need axises in adition to the visualization of datas itself. That is why in Roassal we will create this graph using a composition of two builders. Indeed the structure of a common graph will be composed of a RTGrapher, to manage the axises and then the dataSet is added to it. The RTGrapher is finally built.

The graph structure using RTGrapher:
[[[
graph := RTGrapher new.
dataSet := <aRTAbstractDataSet>.
graph add: dataSet.
graph build.
]]]
 
!!Histogram
Coming back to our iris.csv content saw in the previous chapter we will now manage this datas to create an histogram on the frequency of the epal length.

@@todo RTHistogramSet can't manage a gapSize

First we will process a bit our data to obtain usable datas for our histogram. As we just imported our datas from csv we will change the for first fields from String to Integer, and puts our datas in a variable:

[[[
iris := (NeoCSVReader on: ('iris.csv' asFileReference contents readStream) ) 
   	  addIntegerField; addIntegerField; addIntegerField; addIntegerField; addField; upToEnd.
]]]

We now need to take the first row of theses datas and ask Roassal to make the histogram:
[[[
(iris collect: [ :i | i first ]) histogram
]]]	  

and obtain our first histogram Figure1.

+Histogram 1>file://figures/histo1.png|width=50+

Having a look to the method histogram we can customize it easily, following the structure:
[[[
b := RTGrapher new.
b extent: 400@200.

ds := RTHistogramSet new.
ds points: (iris collect: [ :i | i first ]).
ds barShape width: 40; color: Color darkGray.
ds barChartWithBarTitle: [ :vls |  vls second average round:1  ] rotation: 0 color: Color black.

b add: ds. 
b axisX title: 'Sepal.Length'.
b axisY title: 'Frequency'.

b build.
]]]

We create an instance of RTGrapher and an instance of RTHistogramSet. We define the points of our data set, we define which column to take in account, add the data set to the grapher and build it.

+Histogram 2>file://figures/histo2.png|width=50+
