!Common graphs and builders
In the introduction we talked about the Roassal builders to cover the most common modelisation in Data Mining. In this Chapter we will present and explain the functionning of these builders and create in examples histograms, bar plots, scatter plots, radar and pie charts etc...
We will also discover and manage our datas.

In Roassal, simplicity comes with modularisation. In that case It is always easy to create a composition of graphs. Most of graphs like an histogram will need axises in adition to the visualization of datas itself. That is why in Roassal we will create this graph using a composition of two builders. Indeed the structure of a common graph will be composed of a RTGrapher, to manage the axises and then the dataSet is added to it. The RTGrapher is finally built.

The graph structure using RTGrapher:
[[[
graph := RTGrapher new.
dataSet := <aRTAbstractDataSet>.
graph add: dataSet.
graph build.
]]]
 
!!Histogram
Coming back to our data.csv content saw in the previous chapter we will now manage this datas to create an histogram on the frequency of the level of education.

@@todo when change width of RTStackedDataSet, get out of the extent of RTGrapher, worse cross each others... RTHistogramSet is a lot better but still can't manage a gapSize

First we will process a bit our data to obtain usable datas for our histogram. We need to remove the first informative row of our table, and as we just import them from csv we will change the training level, work experience, salary and sales from String to Integer:

[[[
tab := RTTabTable new.
tab input: 'data.csv' asFileReference contents usingDelimiter: $, .

tab removeFirstRow.
tab convertColumnsAsInteger: #(3 4 5 6).
]]]

The histogram needs an indexable in entry so we give it the values of our table:

[[[
b := RTGrapher new.

ds := RTHistogramSet new.
ds points: tab values. 
ds y: #second.

b add: ds. 
b build.
]]]

We create an instance of RTGrapher and an instance of RTHistogramSet. We define the points of our data set, we define which column to take in account, add the data set to the grapher and build it. Now we can inspect the view:

[[[
b view inspect
]]]

+Histogram 1>file://figures/histo1.png|width=50+

We can now complete our histogram....

[[[
b := RTGrapher new.

ds := RTHistogramSet new.
ds points: tab values. 
ds barShape rectangle; width: 30.
ds y: #second.
ds barChartWithBarTitle: #second.

b add: ds. 
b axisX title: 'Education'.
b axisY title: 'Frequency'.
b build.
]]]

+Histogram 1>file://figures/histo2.png|width=50+
