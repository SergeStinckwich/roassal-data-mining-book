!More graphs and multiple variables

This chapter is about investigations on multiple variables in the same of our data set. We will then present this investigations using the proper graphs.

@@note more about covariance can be found on a more detailed document: NumericalMethods, see Introduction, the classes implemented in this Document are going to be needed available at https://github.com/SergeStinckwich/SciSmalltalk

!!Covariance and correlation
First we will investigate covariance between columns of our datas. Let's take out the last column:
[[[
iris := (NeoCSVReader on: ('iris.csv' asFileReference contents readStream) ) 
   	  addIntegerField; addIntegerField; addIntegerField; addIntegerField; addField; upToEnd.

ds := iris collect: [ :i | i allButLast ].	
]]]	

Then we can get or covariance matrix using the DhbCovarianceAccumulator class:
[[[
accumulator := DhbCovarianceAccumulator new: 4.

ds do: [ :x | accumulator accumulate: x].
covarianceMatrix := accumulator covarianceMatrix.
]]]	

@@todo DhbCovarianceAccumulator missing method to have a direct covariance between two columns ? Add method to easily round all cells ?

@@todo nice tables in Roassal ?

And print the result in a nice table:
[[[
view := RTView new.
substrings := #('Sepal.Length' 'Sepal.Width' 'Petal.Length' 'Petal.Width') asOrderedCollection.
table do: [:r |
	r do: [ :cell | substrings add: cell asString ]].
view addAll: (RTLabel elementsOn: substrings).
RTCellLayout new lineItemsCount:4; gapSize: 10; applyOn: view elements.
^ view
]]]
+Covariance matrix>file://figures/table1.png|width=80+

@@todo not exactly same result than in R ?

@@todo Easy way for correlation from the covariance matrix ? 

About correlation, We will need to divide our tables values by respective standard deviations of their respective columns.
 
We can get a standard deviation:
[[[
sd := DhbFastStatisticalMoments new.
(ds collect: [ :m | m first ]) do: [ :x | sd accumulate: x ].
sd standardDeviation.
]]]

So now we can have our correlation table by:
[[[
table := covarianceMatrix rows collectWithIndex: [:c :i | c collectWithIndex: [ :cell :j |
sd1 := DhbFastStatisticalMoments new.
sd2 := DhbFastStatisticalMoments new.
(ds collect: [ :m | m at: i ]) do: [ :x | sd1 accumulate: x ].
(ds collect: [ :m | m at: j ]) do: [ :x | sd2 accumulate: x  ]. 	
(cell / (sd1 standardDeviation * sd2 standardDeviation)) round: 7]].
]]]

+Correlation matrix>file://figures/table2.png|width=80+

@@todo problems of rounded when calculating covariance.

@@todo having a stat summary table creation ?

!!Box plot

We will create in this part a graph of box plots over the sepal length, one for each of the different species of iris. We first need to divide our data to collect a collection per different species:

[[[
species := (iris collect: [ :i | i last ]) asSet.
speciesCollections := species collect: [ :s | iris select: [:i | i last = s]].
]]] 

Then we collect their sepal length:
[[[
sepalLengthCollections := speciesCollections collect: [ :col | col collect: [ :i | i first ] ].
]]]

We now use the Roassal class RTBoxPlotDataSet combined with RTGrapher:

[[[
b := RTGrapher new.
sepalLengthCollections do: [ :i | | ds |
	ds := RTBoxPlotDataSet new.
	ds points: i.
	b add: ds.].
b build.
]]]
+Boxplot>file://figures/boxPlot.png|width=80+

@@todo some fixes on RTBoxPlotDataSet, outliers aren't too big when not much box plots ? Probably it is defined on width of the box, box too big ?

!!scatter plot

Here we create a scatter plot with the Sepal Width and the Sepal Length. As before we collect Sepal Width and lenght for each of different species:

[[[
sepalWidthLengthCollections := speciesCollections collect: [ :col | col collect: [ :i | {i first. i second} ] ].
]]] 

Now we can define a color identity of each species to difference them on the graph, and create our scatter plot using RTGrapher:

[[[
colorId := RTMultiLinearColorForIdentity new colors: {Color red. Color yellow. Color green }; objects: (sepalWidthLengthCollections asArray).
	
b := RTGrapher new.
sepalWidthLengthCollections do: [ :i | 
	| ds |
	ds := RTDataSet new 
	points: i;
	x: [ :m | m first ];
	y: [ :m | m second ].
	ds dotShape circle color: ((colorId rtValue: i) alpha: 0.5); size: 5.
	b add: ds.	
	].
b build.
]]]
+Scatterplot>file://figures/scatter1.png|width=80+

@@note To distinguish the probable overlaps between points, we can define a weaker alpha value for colors

@@todo R use jitter to add noise

@@todo a matrix of scatter plots ?

@@todo heatmap ?  

!!Level Plot

From here we can easily produce a level plot, giving to our scatter plot a gradient color to represent the Petal Width of our points. We also have to collect the Petal Width:

[[[
sepalWidthLengthCollections := speciesCollections collect: [ :col | col collect: [ :i | {i first. i second. i fourth} ] ].

colorId := RTMultiLinearColorForIdentity new colors: {(Color veryLightGray). (Color black) }; objects: ((sepalWidthLengthCollections flatCollect: [:col | col collect: [:i | i third] ]) asArray sort).
]]]

And the grapher, only the shape and color change, using the Petal Width:
[[[
b := RTGrapher new.
sepalWidthLengthCollections do: [ :i | 
	| ds |
	ds := RTDataSet new 
	points: i;
	x: [ :m | m first ];
	y: [ :m | m second ].
	ds dotShape rectangle color: [ :m | (colorId rtValue: m third)] ; size: 5.
	b add: ds.	
	].
b build.
]]]
+Level Plot>file://figures/levelPlot.png|width=80+

@@todo ad a gradient scale next to the scatter maybe in a level plot builder ?

@@todo The contour plot ?
