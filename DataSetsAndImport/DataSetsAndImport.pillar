!Datasets, Import and Export

From inside Pharo, Roassal can take in entry different kind of data, depending on the builder used. Simple data structures like collections or complexe dataset structures. For example, a RTBoxPlotDataSet will take a collection while the RTGrapher will take the RTBoxPlotDataSet itself. We will discuss the complex structure datasets that Roassal offers in the coming chapters.

The challenge here will most likely be to bring the data inside Pharo before modulate them as will.

!!Import from CSV

We will use the package NeoCSV to work with our CSV format data. You can load NeoCSV in your image using the catalog browser or directly: 
[[[
Gofer new
smalltalkhubUser: 'SvenVanCaekenberghe' project: 'Neo';
package: 'ConfigurationOfNeoCSV';
load. ConfigurationOfNeoCSV load
]]]
 
Let's assume that we dispose of this "iris.csv" file in the workdirectory of our Pharo image, that looks like this:

[[[
5.1,3.5,1.4,0.2,Iris-setosa
4.9,3.0,1.4,0.2,Iris-setosa
4.7,3.2,1.3,0.2,Iris-setosa
4.6,3.1,1.5,0.2,Iris-setosa
5.0,3.6,1.4,0.2,Iris-setosa
5.4,3.9,1.7,0.4,Iris-setosa
4.6,3.4,1.4,0.3,Iris-setosa
5.0,3.4,1.5,0.2,Iris-setosa
4.4,2.9,1.4,0.2,Iris-setosa
4.9,3.1,1.5,0.1,Iris-setosa
5.4,3.7,1.5,0.2,Iris-setosa
4.8,3.4,1.6,0.2,Iris-setosa
4.8,3.0,1.4,0.1,Iris-setosa
4.3,3.0,1.1,0.1,Iris-setosa
5.8,4.0,1.2,0.2,Iris-setosa
5.7,4.4,1.5,0.4,Iris-setosa
5.4,3.9,1.3,0.4,Iris-setosa
5.1,3.5,1.4,0.3,Iris-setosa
5.7,3.8,1.7,0.3,Iris-setosa
5.1,3.8,1.5,0.3,Iris-setosa
etc.
]]]
@@note more info in the Introduction

The first step is to import the content of the file in the workspace and create a read stream:     
[[[
('iris.csv' asFileReference contents readStream)
]]]

Then we read this stream with NeoCSVReader, knowing or separators are comas, the delimiter by default:
[[[
(NeoCSVReader on: ('iris.csv' asFileReference contents readStream) ) upToEnd.
]]]

At this point or data are imported in Pharo and perfectly usable !

Note that by inspecting it we get an Array (size 150), of arrays (size 5), which represent well our iris data.

@@todo could be interesting to have a method summary that create a table resume of our data

We can also import the csv file from an URL. In that case:

[[[
(NeoCSVReader on: ('myUrl' asUrl retrieveContents readStream) ) upToEnd.
]]]

!!Export to CSV

We can easily export data to csv format using NeoCSVWritter. For example:

[[[
String streamContents: [ :stream |
	   (NeoCSVWriter on: stream)
	   nextPutAll: #( (x y z) (10 20 30) (40 50 60) (70 80 90) ) ].
]]]

!!Import via SQLite3

It exist other pharo packages, external from Roassal, to import data into Pharo. Here is an example with the NBSQLite3 package to import .db files and extarct a perfectly usable content for Roassal.

@@todo a complete example ? Reference other Sources (more complex installation, specially Linux)?

@@todo Other formats like SAS, ODBC, XLS ?






